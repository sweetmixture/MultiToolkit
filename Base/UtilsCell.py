#!/bin/python

import numpy as np
import os

from Base.Atoms import Atom
from Base.Cells import Cell
from Base.Clusters import Cluster

'''
	#
	# -------------------------------------------------------------------------------------------------
	# FHIaims output handling
	# -------------------------------------------------------------------------------------------------
	#

	* Synopsis:

		16.10.2023

		(1) def read_fhiaims_cell(path)

			Read periodic FHIaims geometry.in compatible text file

		(2) def find_MX_clusters(cell,M='',X='',cutd=4.0): find possible clusters formed by M-X within 'cutd' 

			Input	: cell <Cell>
			Return	: <Cluster>[]

		(3) def merge_clusters(clusters): merging clusters - generated by (2) - into a single cluster by removing duplicated atoms


	# REQ:

	Reporting internal cell : A. beta_angles (3) . delta_beta_angles (3) / B. delta_d (8) / C. SigmaSquraed (8)
	Reporting cell          : lattice constants / lattice angles / lattice volume / energy /

'''

#
#	(1) Read FHIaims periodic cell
#
def read_fhiaims_cell(path):

	exist = os.path.exists(path)

	if exist is False:
		return False
	
	cell = Cell()
	#
	#	First pass
	#
	lvectors = []

	with open(path,'r') as f:
		for line in f:
			# pass empty line
			if line.strip() == '':
				continue
			# else get workd
			else:
				words = line.split()
			# pass commented line
			if line[0] == '#':
				continue
			if words[0] == 'lattice_vector':
				lvectors.append(list(map(float,words[1:])))

	cell.set_lattice(lvectors=lvectors)
	#print(cell.get_lvectors())
	#print(cell.get_lvolume())
	#print(cell.get_langles())
	#print(cell.get_lconstants())

	#
	#	Second pass
	#
	with open(path,'r') as f:

		for line in f:
			# pass empty line
			if line.strip() == '':
				continue
			# else get word
			else:
				words = line.split()
			# if fractional used
			if words[0] == 'atom_frac':

				frac = list(map(float,words[1:4]))
				element = words[4]

				atom = Atom()
				atom.set_atom3d(element,lvectors,frac,mode='frac')
				cell.add_atom(atom)
			# if cartesian used
			if words[0] == 'atom':

				cart = list(map(float,words[1:4]))
				element = words[4]

				atom = Atom()
				atom.set_atom3d(element,lvectors,cart,mode='cart')
				cell.add_atom(atom)

	return cell


#
#	(2) Find possible cluster formed by M-X cutd 4.0 Angstrom (default)
#
def find_MX_clusters(cell,M='',X='',cutd=4.0):

	clusters = []

	for atomM in cell.get_atoms():

		if atomM.get_element() == M:		
			# create cluster
			cluster = Cluster()
			# create atom
			atom = Atom()
			atom.set_atom0d(atomM.get_element(),atomM.get_cart())
			# add atom to cluster
			cluster.add_atom(atom)

			for atomX in cell.get_atoms():

				if atomX.get_element() == X:

					fracM = atomM.get_frac()
					fracX = atomX.get_frac()
					# workspace
					fracXn = [ 0. for i in range(3) ]
					dfrac  = [ 0. for i in range(3) ]

					# (1) along 'a' lvector
					if fracM[0] - fracX[0]  <= -0.5:
						fracXn[0] = fracX[0] - 1.0
						dfrac[0]  = fracM[0] - fracXn[0]
					elif 0.5 <= fracM[0] - fracX[0]:
						fracXn[0] = fracX[0] + 1.0
						dfrac[0] = fracM[0] - fracXn[0]
					else:
						fracXn[0] = fracX[0]
						dfrac[0] = fracM[0] - fracX[0]

					# (2) along 'b' lvector
					if fracM[1] - fracX[1]  <= -0.5:
						fracXn[1] = fracX[1] - 1.0
						dfrac[1]  = fracM[1] - fracXn[1]
					elif 0.5 <= fracM[1] - fracX[1]:
						fracXn[1] = fracX[1] + 1.0
						dfrac[1] = fracM[1] - fracXn[1]
					else:
						fracXn[1] = fracX[1]
						dfrac[1] = fracM[1] - fracX[1]

					# (3) along 'c' lvector
					if fracM[2] - fracX[2]  <= -0.5:
						fracXn[2] = fracX[2] - 1.0
						dfrac[2]  = fracM[2] - fracXn[2]
					elif 0.5 <= fracM[2] - fracX[2]:
						fracXn[2] = fracX[2] + 1.0
						dfrac[2] = fracM[2] - fracXn[2]
					else:
						fracXn[2] = fracX[2]
						dfrac[2] = fracM[2] - fracX[2]

					# calculate distance
					dist_vector = np.dot(np.array(cell.get_lattice_matrix()),np.array(dfrac))
					dist = np.linalg.norm(dist_vector)

					if dist < cutd:
						cart = np.dot(np.array(cell.get_lattice_matrix()),np.array(fracXn)).tolist()
						# create atom
						atom = Atom()
						atom.set_atom0d(atomX.get_element(),cart)
						# add atom to cluster
						cluster.add_atom(atom)
					
			clusters.append(cluster)

	return clusters

#
#	(3) Mergin clusters - generated by (2) - into a single cluster by removing duplicated atoms
#
def merge_clusters(clusters):

	NotImplemented


if __name__ == '__main__':

	cell = read_fhiaims_cell('/work/e05/e05/wkjee/PAX/VVUQ/Perovskite/UQ_CsPbI/Move_Atoms_E0.5.2/MoveX/local_177/run__7otq69o9/runs/run_1/geometry.in')
	print('-- fhiaims fractional')
	cell.write_fhiaims(rule='frac',stdout=True)
	print('-- fhiaims cartesian')
	cell.write_fhiaims(rule='cart',stdout=True)

	print('-- test 2')
	cell = read_fhiaims_cell('/work/e05/e05/wkjee/PAX/VVUQ/Perovskite/UQ_CsPbI/Move_Atoms_E1.3/MoveX/summary_1-210/180_aims_final.in')
	print('-- fhiaims fractional')
	cell.write_fhiaims(rule='frac',stdout=True)
	#print('-- fhiaims cartesian')
	#cell.write_fhiaims(rule='cart',stdout=True)


	print('-- test 3')
	#print(cell.get_lvectors())
	#print(cell.get_lvolume())
	#print(cell.get_langles())
	#print(cell.get_lconstants())

	print(' * * * unit test 1 done * * * ')
	print('')

	clusters = find_MX_clusters(cell,M='Pb',X='I')		# find clusters in cartesian coordinates
	print(f'Number of Oh MX6 units: {len(clusters)}')
	for cluster in clusters:
		cluster.print_atoms(mode='xyz')

	print(' * * * unit test 2 done * * * ')
	print('')












