#
#   03.2024 W.Jee 
#
#   KLMC Solid Solution: scripts for production phase
#

import sys,os
import pandas as pd

'''
	This script is for collecting vibrational frequencies

	In order to keep GULP taskid and connected frequencies, this script requires 'csv' file generated by 'KLMC_PoolGulpEx.py'
	* see /MnO_ProductionPhase_PostScripting/KLMC_PoolGulpEx.py
'''
# USER DEFINE ----
_target_csvfile = sys.argv[1]             # cmd input : KLMC_PoolGulpEx.py generated csvfile
_gulp_frequency_filename = 'freq.out'     # individual gulp run generated frequency file: see GULP manual, option word 'freq'
_klmc_tf_dir_prefix = 'A'                 # klmc taskfarming gulp run directory prefix, e.g., A0, A1, A2, ... A9999.
_output_freq_textfile = 'klmc_freq_summary.txt'
# USER DEFINE ----

# ----------------------------------------------------------------------------------------------------------------------------------
df = pd.read_csv(_target_csvfile)	# sys.argv[1] must be the original 'csv' collection file from the previous final taskfarming run
print(df['taskid'])
dir_path = os.getcwd()

# USER
with open(f'{_output_freq_textfile}','w') as wf:

	total_len = len(df['taskid'].tolist())

	for cnt, taskid in enumerate(df['taskid'].tolist()):
	
		gdir  = _klmc_tf_dir_prefix + str(taskid)
		gpath = os.path.join(dir_path,gdir)
		gfile = _gulp_frequency_filename
		gpath = os.path.join(gpath,gfile)
	
		#print(os.path.exists(gpath),gpath)
		print(f'progressing {taskid} : {cnt}/{total_len}')

		f = open(gpath)
		freq_list = [ line.rstrip() for line in f.readlines() ]

		wf.write('%8.5s\t' % (taskid))
		for freq in freq_list:
			wf.write('%s\t' % (freq))
		wf.write('\n')
